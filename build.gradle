//TODO move dfuntest to separate source set
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'

def DEPENDENCY_LIB_DIRECTORY = "lib/"
def RUNTIME_LIB_DIRECTORY = "lib/"

repositories {
    mavenCentral()
}

configurations {
    runtime {
        extendsFrom compile
    }
}

dependencies {
    compile group: 'commons-configuration', name: 'commons-configuration', version: '1.10'
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2.1'
    compile group: 'com.google.guava', name: 'guava', version: '18.0'
    compile group: 'com.google.inject', name: 'guice', version: '3.0'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.7'
    compile group: 'org.glassfish.jersey.core', name: 'jersey-server', version: '2.13'
    compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-grizzly2-http', version: '2.13'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.+'
    testCompile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.7'
    testCompile group: 'me.gregorias', name: 'dfuntest', version: '0.1.1'
    runtime group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.7'
    runtime group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: '2.13'
    testRuntime group: 'org.glassfish.jersey.core', name: 'jersey-client', version: '2.13'
}

compileJava {
    sourceCompatibility = '1.7'
    targetCompatibility = '1.7'
}

compileTestJava {
    sourceCompatibility = '1.7'
    targetCompatibility = '1.7'
}

task copyAllDependencies(type: Copy) {
    from configurations.runtime
    into DEPENDENCY_LIB_DIRECTORY

    from configurations.testRuntime
    into DEPENDENCY_LIB_DIRECTORY
}

jar {
    manifest {
        attributes 'Main-Class': 'Main',
                   'Class-Path': generateClassPath(configurations.runtime, RUNTIME_LIB_DIRECTORY, " ")
    }
}

task jarTest(type: Jar) {
    from sourceSets.test.output
    baseName += 'Test'
}

task buildAll {
    dependsOn 'build'
    dependsOn 'jarTest'
}

findbugs {
    effort = "max"
    excludeFilter = file("$project.projectDir/config/findbugs/findbugsExcludeFilter.xml")
    reportLevel = "low"
    toolVersion = "3.0.0"
    println toolVersion
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

/* Generate gradlew and gradle wrappers for portable gradle use */
task wrapper(type: Wrapper) {
    gradleVersion = '2.1'
}

def generateClassPath(configurationSet, prefix, separator) {
    def classPathString = ""
    configurationSet.each { File file -> classPathString += prefix + file.getName() + separator }
    if (classPathString.size() == 0) {
        return classPathString;
    } else {
        return classPathString.getAt([0..(classPathString.size() - 2)]);
    }
}
